CMAKE_MINIMUM_REQUIRED(VERSION 3.1 FATAL_ERROR)
PROJECT(OpenMapperDesktop)

# SET(CMAKE_CXX_STANDARD 17) This should be the right option though from cmake 3.8+, ubuntu 14.04 does not have this package available right now.
ADD_COMPILE_OPTIONS("-std=c++17")

# Instruct CMake to run moc automatically when needed.
SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)

# Find includes in corresponding build directories.
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

# Set if this software should be packaged.
OPTION(PACKAGE_APP "Create packages for the operating system." OFF)
OPTION(CREATE_SNAP_APP "Create a snap package for linux with snapcraft." OFF)

################################
# Define Dependencies
################################

FIND_PACKAGE(OpenCV REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5OpenGL REQUIRED)

INCLUDE_DIRECTORIES(
  ${OPENGL_INCLUDE_DIRS}
  ${CMAKE_CURRENT_LIST_DIR}/include
  # This is used as the header files generated by Qt do not find other header files if their directory is not included.
  # All other includes should be made using "openmapper_desktop/header.h".
  ${CMAKE_CURRENT_LIST_DIR}/include/openmapper_desktop

  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/eigen

  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/miniglog

  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/include
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/DBoW2/DBoW2
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/core
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/solvers
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/stuff
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/types
)

INCLUDE("${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/CMakeLists.txt")

SET(OMD_LIB_HEADER_DIR ${CMAKE_CURRENT_LIST_DIR}/include)
SET(OMD_LIB_SRC_DIR ${CMAKE_CURRENT_LIST_DIR}/src)

FILE(GLOB_RECURSE OMD_LIB_HEADERS "${OMD_LIB_HEADER_DIR}/*.h")
FILE(GLOB_RECURSE OMD_LIB_SOURCES "${OMD_LIB_SRC_DIR}/*.cc")
SET(OMD_LIB_RESOURCES ${OMD_LIB_SOURCES} ${OMD_LIB_HEADERS})

ADD_EXECUTABLE(${PROJECT_NAME} ${OMD_LIB_RESOURCES})

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
  Qt5::Widgets
  Qt5::Core
  Qt5::OpenGL
  debug ${OPENGL_LIBRARIES} optimized ${OPENGL_LIBRARIES}
  debug ${MINI_GLOG} optimized ${MINI_GLOG}
  debug ${OpenCV_LIBRARIES} optimized ${OpenCV_LIBRARIES}
  debug ${DBOW2_LIB} optimized ${DBOW2_LIB}
  debug ${G2O_LIB} optimized ${G2O_LIB}
  debug ${ORB_SLAM2_LIB} optimized ${ORB_SLAM2_LIB}
  debug ${OPENMAPPER_LIB} optimized ${OPENMAPPER_LIB}
)

# Generate proper GUI program on specified platform.
IF(APPLE)
  SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE YES)
ELSEIF(UNIX)
  # Nothing special required
ELSE()
  message(SEND_ERROR "You are on an unsupported platform! (Windows not supported yet)")
ENDIF(APPLE)

SET_TARGET_PROPERTIES(${PROJECT_NAME}  PROPERTIES
    DEBUG_POSTFIX "_d"
    RUNTIME_OUTPUT_DIRECTORY ../bin/
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ../bin/
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ../bin/
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ../bin/)

INSTALL(TARGETS ${PROJECT_NAME} DESTINATION openmapper)

INSTALL(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Vocabulary DESTINATION openmapper/Vocabulary)

INSTALL(DIRECTORY include/ DESTINATION include/openmapper
        FILES_MATCHING PATTERN "*.h")
INSTALL(DIRECTORY src/ DESTINATION openmapper/src)

IF(PACKAGE_APP)

  IF(APPLE)
    # TODO
    # SET(CPACK_GENERATOR "DEB")
  ENDIF()
  IF(UNIX)
    SET(CPACK_GENERATOR "DEB")
    # Dependencies
    SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON) # Commented as it uses the ros-lunar-opencv package as dependency instead of libopencv.
    SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.14), libgcc1 (>= 1:3.0), libgl1, libqt5core5a (>= 5.7.0), libqt5gui5 (>= 5.3.0) | libqt5gui5-gles (>= 5.3.0), libqt5opengl5 (>= 5.0.2) | libqt5opengl5-gles (>= 5.0.2), libqt5widgets5 (>= 5.0.2), libstdc++6 (>= 6), libopencv-dev (>=2.4.0)")

    SET(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
  ENDIF()
  SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Nicolas Degen & Carlos Gomes")
  SET(CPACK_PACKAGE_CONTACT "Carlos Gomes gocarlos@ethz.ch") # TODO: change this.
  SET(CPACK_PACKAGE_VENDOR "OpenMapper")
  set(CPACK_PACKAGE_DESCRIPTION "This App is a Mapping App. It uses Mono-SLAM.")

  SET(MAJOR_VERSION "0")
  SET(MINOR_VERSION "1")
  SET(PATCH_VERSION "0")
  SET(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
  SET(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
  SET(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")
  SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")
  SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")



  INCLUDE(CPack)
ENDIF()
