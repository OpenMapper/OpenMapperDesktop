CMAKE_MINIMUM_REQUIRED(VERSION 3.1 FATAL_ERROR)
PROJECT(OpenMapperDesktop)

SET(CMAKE_CXX_STANDARD 14)

# Instruct CMake to run moc automatically when needed.
SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)  

# Find includes in corresponding build directories
SET(CMAKE_INCLUDE_CURRENT_DIR ON)


################################
# Define Dependencies
################################

FIND_PACKAGE(OpenCV 3.0.0 REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5OpenGL REQUIRED)

INCLUDE_DIRECTORIES(
  ${OPENGL_INCLUDE_DIRS}
  ${CMAKE_CURRENT_LIST_DIR}/include
  # This is used as the header files generated by Qt do not find other header files if their directory is not included. 
  # All other includes should be made using "openmapper_desktop/header.h".
  ${CMAKE_CURRENT_LIST_DIR}/include/openmapper_desktop
  
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/eigen

  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/miniglog
  
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/include
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/DBoW2/DBoW2
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/core
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/solvers
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/stuff
  ${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/thirdparty/slam_engine/ORB_SLAM2/Thirdparty/g2o/g2o/types
)

INCLUDE("${CMAKE_CURRENT_LIST_DIR}/libs/OpenMapper/CMakeLists.txt")

SET(OMD_LIB_HEADER_DIR
 ${CMAKE_CURRENT_LIST_DIR}/include
)

SET(OMD_LIB_SRC_DIR
 ${CMAKE_CURRENT_LIST_DIR}/src
)

FILE(GLOB_RECURSE OMD_LIB_HEADERS "${OMD_LIB_HEADER_DIR}/*.h")
FILE(GLOB_RECURSE OMD_LIB_SOURCES "${OMD_LIB_SRC_DIR}/*.cc")

SET(OMD_LIB_RESOURCES
  ${OMD_LIB_SOURCES}
  ${OMD_LIB_HEADERS}
)

# compile
ADD_EXECUTABLE(${PROJECT_NAME}_main
  ${OMD_LIB_RESOURCES}
)

# Build it (link libraries)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_main
  Qt5::Widgets
  Qt5::Core
  Qt5::OpenGL
  debug ${OPENGL_LIBRARIES} optimized ${OPENGL_LIBRARIES}
  debug ${MINI_GLOG} optimized ${MINI_GLOG}
  debug ${OpenCV_LIBRARIES} optimized ${OpenCV_LIBRARIES}
  debug ${DBOW2_LIB} optimized ${DBOW2_LIB}
  debug ${G2O_LIB} optimized ${G2O_LIB}
  debug ${ORB_SLAM2_LIB} optimized ${ORB_SLAM2_LIB}
  debug ${OPENMAPPER_LIB} optimized ${OPENMAPPER_LIB}
)

# generate proper GUI program on specified platform.
IF(APPLE)
	SET_TARGET_PROPERTIES(${PROJECT_NAME}_main PROPERTIES
			MACOSX_BUNDLE YES
	)
ELSEIF(UNIX)
	# Nothing special required
ELSE()
	message(SEND_ERROR "You are on an unsupported platform! (Windows not supported yet)")
ENDIF(APPLE)

SET_TARGET_PROPERTIES(${PROJECT_NAME}_main  PROPERTIES
    DEBUG_POSTFIX "_d"
    RUNTIME_OUTPUT_DIRECTORY ../bin/
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ../bin/
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ../bin/
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ../bin/)
